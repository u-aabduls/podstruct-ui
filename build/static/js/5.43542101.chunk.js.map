{"version":3,"sources":["components/Forms/FormValidator.js","components/Common/MonthSelector.js","components/Common/DaySelector.js","components/Common/YearSelector.js","components/Pages/Register.js"],"names":["FormValidator","isValidName","input","alpha","split","i","length","toUpperCase","char","charAt","includes","isValidPODName","num","isValidPassword","alphaLower","special","upperFound","lowerFound","numFound","specialFound","validate","element","isCheckbox","type","value","checked","name","Error","param","getAttribute","validations","JSON","parse","result","forEach","m","validator","isEmpty","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","equals","isLength","min","max","toInt","list","isIn","bulkValidate","inputs","errors","hasError","Object","keys","some","val","options","label","customStyles","container","provided","width","margin","MonthSelector","placeholder","styles","DaySelector","YearSelector","firstValidYear","Date","getFullYear","year","push","toString","setOptions","Register","state","formRegister","email","firstName","lastName","dob","podName","password","confirmedPassword","terms","validateOnChange","event","target","form","setState","onSubmit","e","elements","filter","nodeName","console","log","preventDefault","formName","inputName","method","className","href","src","alt","this","htmlFor","Input","invalid","onChange","data-validate","id","data-param","autoComplete","to","Component"],"mappings":"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","file":"static/js/5.43542101.chunk.js","sourcesContent":["// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n\r\n    /**\r\n     * Returns true iff:\r\n     *     1) input is alpha only\r\n     *     2) input's only special character (if exists) is apostrophe (') or hyphen (-)\r\n     */\r\n    isValidName(input) {\r\n        const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n\r\n        var i = input.length;\r\n        input = input.toUpperCase();\r\n        while (i--) {\r\n            var char = input.charAt(i);\r\n            if (!alpha.includes(char) && (char !== '\\'' && char !== '-')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Returns true iff:\r\n     *     1) input is alphanumeric\r\n     *     2) input's only special character (if exists) is hyphen (-) \r\n     */\r\n    isValidPODName(input) {\r\n        const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n        const num = \"0123456789\".split(\"\");\r\n\r\n        // name not valid if less than 2 characters long\r\n        if (input.length < 2) {\r\n            return false;\r\n        }\r\n\r\n        var i = input.length;\r\n        input = input.toUpperCase();\r\n        while (i--) {\r\n            var char = input.charAt(i);\r\n            if (!alpha.includes(char) && !num.includes(char)) {\r\n                if (char !== '-') {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Returns true iff:\r\n     *     1) input is at least 8 chars long\r\n     *     2) input contains 1 upper case letter \r\n     *     3) input contains 1 lower case letter\r\n     *     4) input contains 1 number \r\n     *     5) input contains 1 special character\r\n     */\r\n    isValidPassword(input) {\r\n        const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n        const alphaLower = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\r\n        const num = \"0123456789\".split(\"\");\r\n        const special = \"`~!@#$%^&*()-_=+[{]};:,<.>/?\".split(\"\");\r\n\r\n        if (input.length < 8) {\r\n            return false;\r\n        }\r\n\r\n        var i = input.length,\r\n            upperFound = false,\r\n            lowerFound = false,\r\n            numFound = false,\r\n            specialFound = false;\r\n\r\n        while (i--) {\r\n            var char = input.charAt(i);\r\n            if (!upperFound && alpha.includes(char)) {\r\n                upperFound = true;\r\n            }\r\n            if (!lowerFound && alphaLower.includes(char)) {\r\n                lowerFound = true;\r\n            }\r\n            if (!numFound && num.includes(char)) {\r\n                numFound = true;\r\n            }\r\n            if (!specialFound && special.includes(char)) {\r\n                specialFound = true;\r\n            }\r\n        }\r\n        return upperFound && lowerFound && numFound && specialFound;\r\n    },\r\n\r\n    /**\r\n     * Validate input element\r\n     * @param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n        const param = element.getAttribute('data-param');\r\n        const validations = JSON.parse(element.getAttribute('data-validate'));\r\n\r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n            validations.forEach(m => {\r\n                switch (m) {\r\n                    case 'required':\r\n                        result[m] = isCheckbox ? value === false : validator.isEmpty(value)\r\n                        break;\r\n                    case 'email':\r\n                        result[m] = !validator.isEmail(value)\r\n                        break;\r\n                    case 'number':\r\n                        result[m] = !validator.isNumeric(value)\r\n                        break;\r\n                    case 'integer':\r\n                        result[m] = !validator.isInt(value)\r\n                        break;\r\n                    case 'alphanum':\r\n                        result[m] = !validator.isAlphanumeric(value)\r\n                        break;\r\n                    case 'url':\r\n                        result[m] = !validator.isURL(value)\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as param\r\n                        const value2 = document.getElementById(param).value;\r\n                        result[m] = !validator.equals(value, value2)\r\n                        break;\r\n                    case 'minlen':\r\n                        result[m] = !validator.isLength(value, { min: param })\r\n                        break;\r\n                    case 'maxlen':\r\n                        result[m] = !validator.isLength(value, { max: param })\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(param)\r\n                        result[m] = !validator.isLength(value, { min, max })\r\n                        break;\r\n                    case 'min':\r\n                        result[m] = !validator.isInt(value, { min: validator.toInt(param) })\r\n                        break;\r\n                    case 'max':\r\n                        result[m] = !validator.isInt(value, { max: validator.toInt(param) })\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(param)\r\n                        result[m] = !validator.isIn(value, list)\r\n                        break;\r\n                    case 'name':\r\n                        result[m] = !this.isValidName(value)\r\n                        break;\r\n                    case 'podname':\r\n                        result[m] = !this.isValidPODName(value)\r\n                        break;\r\n                    case 'password':\r\n                        result[m] = !this.isValidPassword(value)\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            errors = { ...errors, [input.name]: result }\r\n            if (!hasError) hasError = Object.keys(result).some(val => result[val])\r\n        })\r\n\r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;","import React from 'react'\nimport Select from 'react-select'\nimport \"../../styles/app/widgets/select.css\";\n\nconst options = [\n  { value: '0', label: 'Jan' },\n  { value: '1', label: 'Feb' },\n  { value: '2', label: 'Mar' },\n  { value: '3', label: 'Apr' },\n  { value: '4', label: 'May' },\n  { value: '5', label: 'Jun' },\n  { value: '6', label: 'Jul' },\n  { value: '7', label: 'Aug' },\n  { value: '8', label: 'Sept' },\n  { value: '9', label: 'Oct' },\n  { value: '10', label: 'Nov' },\n  { value: '11', label: 'Dec' }\n];\n\nconst customStyles = {\n  container: provided => ({\n    ...provided,\n    width: `38.5%`,\n    margin: `0% 1.5% 0% 0%`,\n  })\n};\n\nexport default function MonthSelector() {\n    return (\n      <Select\n        placeholder={`Month`}\n        styles={customStyles}\n        options={options} \n      />\n    )\n}","import React from 'react'\nimport Select from 'react-select'\nimport \"../../styles/app/widgets/select.css\";\n\nconst options = [\n  { value: '1', label: '1' },\n  { value: '2', label: '2' },\n  { value: '3', label: '3' },\n  { value: '4', label: '4' },\n  { value: '5', label: '5' },\n  { value: '6', label: '6' },\n  { value: '7', label: '7' },\n  { value: '8', label: '8' },\n  { value: '9', label: '9' },\n  { value: '10', label: '10' },\n  { value: '11', label: '11' },\n  { value: '12', label: '12' },\n  { value: '13', label: '13' },\n  { value: '14', label: '14' },\n  { value: '15', label: '15' },\n  { value: '16', label: '16' },\n  { value: '17', label: '17' },\n  { value: '18', label: '18' },\n  { value: '19', label: '19' },\n  { value: '20', label: '20' },\n  { value: '21', label: '21' },\n  { value: '22', label: '22' },\n  { value: '23', label: '23' },\n  { value: '24', label: '24' },\n  { value: '25', label: '25' },\n  { value: '26', label: '26' },\n  { value: '27', label: '27' },\n  { value: '28', label: '28' },\n  { value: '29', label: '29' },\n  { value: '30', label: '30' },\n  { value: '31', label: '31' }\n];\n\nconst customStyles = {\n  container: provided => ({\n    ...provided,\n    width: `28.5%`,\n    margin: `0% 1.5% 0% 0%`,\n  })\n};\n\nexport default function DaySelector() {\n    return (\n      <Select\n        placeholder={`Day`}\n        styles={customStyles}\n        options={options} \n      />\n    )\n}","import React from 'react'\nimport Select from 'react-select'\nimport \"../../styles/app/widgets/select.css\";\n\nconst options = [];\n\nconst customStyles = {\n  container: provided => ({\n    ...provided,\n    width: `30%`\n  })\n};\n\nfunction setOptions() {\n  const firstValidYear = new Date().getFullYear();\n  var year = firstValidYear;\n  while (year >= (firstValidYear - 70)) {\n    options.push({ value: year.toString(), label: year.toString() });\n    year--;\n  }\n}\n\nexport default function YearSelector() {\n    setOptions();\n    return (\n      <Select\n        placeholder={`Year`}\n        styles={customStyles}\n        options={options} \n      />\n    )\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Input } from 'reactstrap';\r\nimport MonthSelector from \"../Common/MonthSelector\";\r\nimport DaySelector from \"../Common/DaySelector\";\r\nimport YearSelector from \"../Common/YearSelector\";\r\n\r\n// import { CustomInput } from 'reactstrap';\r\n\r\nimport FormValidator from '../Forms/FormValidator.js';\r\n\r\nclass Register extends Component {\r\n\r\n    state = {\r\n        formRegister: {\r\n            email: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            dob: '',\r\n            podName: '',\r\n            password: '',\r\n            confirmedPassword: '',\r\n            terms: false\r\n        }\r\n    }\r\n\r\n     /**\r\n      * Validate input using onChange event\r\n      * @param  {String} formName The name of the form in the state object\r\n      * @return {Function} a function used for the event\r\n      */\r\n    validateOnChange = event => {\r\n        const input = event.target;\r\n        const form = input.form\r\n        const value = input.type === 'checkbox' ? input.checked : input.value;\r\n\r\n        const result = FormValidator.validate(input);\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                [input.name]: value,\r\n                errors: {\r\n                    ...this.state[form.name].errors,\r\n                    [input.name]: result\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onSubmit = e => {\r\n        const form = e.target;\r\n        const inputs = [...form.elements].filter(i => ['INPUT', 'SELECT'].includes(i.nodeName))\r\n\r\n        const { errors, hasError } = FormValidator.bulkValidate(inputs)\r\n\r\n        this.setState({\r\n            [form.name]: {\r\n                ...this.state[form.name],\r\n                errors\r\n            }\r\n        });\r\n\r\n        console.log(hasError ? 'Form has errors. Check!' : 'Form Submitted!')\r\n\r\n        e.preventDefault()\r\n    }\r\n\r\n    /* Simplify error check */\r\n    hasError = (formName, inputName, method) => {\r\n        return  this.state[formName] &&\r\n                this.state[formName].errors &&\r\n                this.state[formName].errors[inputName] &&\r\n                this.state[formName].errors[inputName][method]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"block-center mt-4 wd-xl\">\r\n                {/* START card */}\r\n                <div className=\"card card-flat\">\r\n                    <div className=\"card-header text-center bg-dark\">\r\n                        <a href=\"\">\r\n                            <img className=\"block-center\" src=\"img/logo.png\" alt=\"Logo\"/>\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <p className=\"text-center py-2\">CREATE YOUR PODSTRUCT ACCOUNT</p>\r\n                        <form className=\"mb-3\" name=\"formRegister\" onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputEmail1\">Email address</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"email\"\r\n                                        name=\"email\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Enter email\"\r\n                                        invalid={this.hasError('formRegister','email','required') || this.hasError('formRegister','email','email')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"email\"]'\r\n                                        value={this.state.formRegister.email}/>\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-envelope\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','email','required') && <span className=\"invalid-feedback\">Email is required</span> }\r\n                                    { this.hasError('formRegister','email','email') && <span className=\"invalid-feedback\">Email must be a valid email</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputPassword1\">First name</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"id-firstName\"\r\n                                        name=\"firstName\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"First name\"\r\n                                        invalid={\r\n                                                this.hasError('formRegister','firstName','required') \r\n                                            ||  this.hasError('formRegister','firstName','minlen')\r\n                                            ||  this.hasError('formRegister','firstName','name')\r\n                                        }\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"minlen\", \"name\"]'\r\n                                        data-param='2'\r\n                                        value={this.state.formRegister.firstName}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-book\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','firstName','required') && <span className=\"invalid-feedback\">First name is required</span> }\r\n                                    { this.hasError('formRegister','firstName','minlen') && <span className=\"invalid-feedback\">First name must have at least 2 characters</span> }\r\n                                    { this.hasError('formRegister','firstName','name') && <span className=\"invalid-feedback\">First name must contain alpha characters only</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputPassword1\">Last name</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"id-lastName\"\r\n                                        name=\"lastName\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Last name\"\r\n                                        invalid={\r\n                                                this.hasError('formRegister','lastName','required') \r\n                                            ||  this.hasError('formRegister','lastName','minlen')\r\n                                            ||  this.hasError('formRegister','lastName','name')\r\n                                        }                                        \r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"minlen\", \"name\"]'\r\n                                        data-param='2'\r\n                                        value={this.state.formRegister.lastName}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-book\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','lastName','required') && <span className=\"invalid-feedback\">Last name is required</span> }\r\n                                    { this.hasError('formRegister','lastName','minlen') && <span className=\"invalid-feedback\">Last name must have at least 2 characters</span> }\r\n                                    { this.hasError('formRegister','lastName','name') && <span className=\"invalid-feedback\">Last name must contain alpha characters only</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputPassword1\">Date of birth</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <MonthSelector />\r\n                                    <DaySelector />\r\n                                    <YearSelector />\r\n                                    { true && <span className=\"invalid-feedback\">Last name is required</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputPassword1\">POD name</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"id-podName\"\r\n                                        name=\"podName\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"POD name\"\r\n                                        invalid={\r\n                                                this.hasError('formRegister','podName','required') \r\n                                            ||  this.hasError('formRegister','podName','minlen')\r\n                                            ||  this.hasError('formRegister','podName','podname')\r\n                                        } \r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"minlen\", \"podname\"]'\r\n                                        data-param='2'\r\n                                        value={this.state.formRegister.podName}\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-users\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','podName','required') && <span className=\"invalid-feedback\">POD name is required</span> }\r\n                                    { this.hasError('formRegister','podName','minlen') && <span className=\"invalid-feedback\">POD name must have at least 2 characters</span> }\r\n                                    { this.hasError('formRegister','podName','podname') && <span className=\"invalid-feedback\">POD name must be alphanumeric</span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputPassword1\">Password</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"id-password\"\r\n                                        name=\"password\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Password\"\r\n                                        invalid={\r\n                                                this.hasError('formRegister','password','required') \r\n                                            ||  this.hasError('formRegister','password','password')\r\n                                        } \r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"required\", \"password\"]'\r\n                                        value={this.state.formRegister.password}\r\n                                        autoComplete='off'\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    { this.hasError('formRegister','password','required') && <span className=\"invalid-feedback\">Password is required</span> }\r\n                                    { this.hasError('formRegister','password','password') && \r\n                                        <span className=\"invalid-feedback\">\r\n                                            Password must have at least 8 characters including each of one of the following:\r\n                                            upper case, lower case, numeric and special character.\r\n                                        </span> }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"text-muted\" htmlFor=\"signupInputRePassword1\">Confirm Password</label>\r\n                                <div className=\"input-group with-focus\">\r\n                                    <Input type=\"text\" \r\n                                        name=\"confirmedPassword\"\r\n                                        className=\"border-right-0\"\r\n                                        placeholder=\"Retype assword\"\r\n                                        invalid={this.hasError('formRegister','confirmedPassword','equalto')}\r\n                                        onChange={this.validateOnChange}\r\n                                        data-validate='[\"equalto\"]'\r\n                                        value={this.state.formRegister.confirmedPassword}\r\n                                        data-param=\"id-password\"\r\n                                        autoComplete='off'\r\n                                    />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text text-muted bg-transparent border-left-0\">\r\n                                            <em className=\"fa fa-lock\"></em>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span className=\"invalid-feedback\">Password confirmation doesn't match password</span>\r\n                                </div>\r\n                            </div>\r\n                            {/* <CustomInput type=\"checkbox\" id=\"terms\"\r\n                                name=\"terms\"\r\n                                label=\"I agree with the terms\"\r\n                                invalid={this.hasError('formRegister','terms','required')}\r\n                                onChange={this.validateOnChange}\r\n                                data-validate='[\"required\"]'\r\n                                checked={this.state.formRegister.terms}>\r\n                                    <span className=\"invalid-feedback\">Field is required</span>\r\n                            </CustomInput> */}\r\n                            <button className=\"btn btn-block btn-primary mt-3\" type=\"submit\">Create account</button>\r\n                        </form>\r\n                        <p className=\"pt-3 text-center\">Have an account?</p>\r\n                        <Link to=\"login\" className=\"btn btn-block btn-secondary\">Log in</Link>\r\n                    </div>\r\n                </div>\r\n                {/* END card */}\r\n                <div className=\"p-3 text-center\">\r\n                    <span className=\"mr-2\">&copy;</span>\r\n                    <span>2021</span>\r\n                    <span className=\"mx-2\">-</span>\r\n                    <span>Podstruct</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}