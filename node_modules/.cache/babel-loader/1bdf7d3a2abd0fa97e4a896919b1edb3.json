{"ast":null,"code":"import _objectSpread from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/a18322/Desktop/podstruct-ui/src/components/Common/ToggleFullscreen.js\";\n// FULLSCREEN\n// -----------------------------------\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport $ from './wrapper.js';\nimport screenfull from 'screenfull';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar FSTOGGLER_EVENT = 'click.fstoggler';\nvar FULLSCREEN_ON_ICON = 'fa fa-expand';\nvar FULLSCREEN_OFF_ICON = 'fa fa-compress';\n/**\r\n * Wrapper for screenfull plugin\r\n * Wraps child element and toggles\r\n * fullscreen mode on click\r\n */\n\nvar ToggleFullscreen = /*#__PURE__*/function (_Component) {\n  _inherits(ToggleFullscreen, _Component);\n\n  var _super = _createSuper(ToggleFullscreen);\n\n  function ToggleFullscreen() {\n    var _this;\n\n    _classCallCheck(this, ToggleFullscreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      iconClass: FULLSCREEN_ON_ICON\n    };\n\n    _this.toggleFSIcon = function () {\n      _this.setState({\n        iconClass: screenfull.isFullscreen ? FULLSCREEN_OFF_ICON : FULLSCREEN_ON_ICON\n      });\n    };\n\n    _this.setRef = function (node) {\n      _this.element = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(ToggleFullscreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var $fsToggler = $(this.element); // Not supported under IE\n\n      var ua = window.navigator.userAgent;\n\n      if (ua.indexOf(\"MSIE \") > 0 || !!ua.match(/Trident.*rv:11\\./)) {\n        $fsToggler.addClass('d-none');\n        return; // and abort\n      }\n\n      $fsToggler.on(FSTOGGLER_EVENT, function (e) {\n        e.preventDefault();\n\n        if (screenfull.enabled) {\n          screenfull.toggle(); // Switch icon indicator\n\n          _this2.toggleFSIcon();\n        } else {\n          console.log('Fullscreen not enabled');\n        }\n      });\n      if (screenfull.raw && screenfull.raw.fullscreenchange) $(document).on(screenfull.raw.fullscreenchange, this.toggleFSIcon);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      $(this.element).off(FSTOGGLER_EVENT);\n      $(document).off(screenfull.raw.fullscreenchange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Tag = this.props.tag;\n      return /*#__PURE__*/_jsxDEV(Tag, _objectSpread(_objectSpread({\n        ref: this.setRef\n      }, this.props), {}, {\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          className: this.state.iconClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return ToggleFullscreen;\n}(Component);\n\nToggleFullscreen.propTypes = {\n  /** tag to use, defaults to A */\n  tag: PropTypes.string\n};\nToggleFullscreen.defaultProps = {\n  tag: 'a'\n};\nexport { ToggleFullscreen as default };","map":{"version":3,"sources":["/Users/a18322/Desktop/podstruct-ui/src/components/Common/ToggleFullscreen.js"],"names":["React","Component","PropTypes","$","screenfull","FSTOGGLER_EVENT","FULLSCREEN_ON_ICON","FULLSCREEN_OFF_ICON","ToggleFullscreen","state","iconClass","toggleFSIcon","setState","isFullscreen","setRef","node","element","$fsToggler","ua","window","navigator","userAgent","indexOf","match","addClass","on","e","preventDefault","enabled","toggle","console","log","raw","fullscreenchange","document","off","Tag","props","tag","propTypes","string","defaultProps"],"mappings":";;;;;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,CAAP,MAAc,cAAd;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,IAAMC,eAAe,GAAG,iBAAxB;AACA,IAAMC,kBAAkB,GAAG,cAA3B;AACA,IAAMC,mBAAmB,GAAG,gBAA5B;AAEA;AACA;AACA;AACA;AACA;;IACqBC,gB;;;;;;;;;;;;;;;UAWjBC,K,GAAQ;AACJC,MAAAA,SAAS,EAAEJ;AADP,K;;UAkCRK,Y,GAAe,YAAM;AACjB,YAAKC,QAAL,CAAc;AACVF,QAAAA,SAAS,EAAEN,UAAU,CAACS,YAAX,GAA0BN,mBAA1B,GAAgDD;AADjD,OAAd;AAGH,K;;UAODQ,M,GAAS,UAAAC,IAAI,EAAI;AACb,YAAKC,OAAL,GAAeD,IAAf;AACH,K;;;;;;;WA3CD,6BAAoB;AAAA;;AAEhB,UAAME,UAAU,GAAGd,CAAC,CAAC,KAAKa,OAAN,CAApB,CAFgB,CAIhB;;AACA,UAAME,EAAE,GAAGC,MAAM,CAACC,SAAP,CAAiBC,SAA5B;;AACA,UAAIH,EAAE,CAACI,OAAH,CAAW,OAAX,IAAsB,CAAtB,IAA2B,CAAC,CAACJ,EAAE,CAACK,KAAH,CAAS,kBAAT,CAAjC,EAA+D;AAC3DN,QAAAA,UAAU,CAACO,QAAX,CAAoB,QAApB;AACA,eAF2D,CAEnD;AACX;;AAEDP,MAAAA,UAAU,CAACQ,EAAX,CAAcpB,eAAd,EAA+B,UAAAqB,CAAC,EAAI;AAChCA,QAAAA,CAAC,CAACC,cAAF;;AAEA,YAAIvB,UAAU,CAACwB,OAAf,EAAwB;AAEpBxB,UAAAA,UAAU,CAACyB,MAAX,GAFoB,CAIpB;;AACA,UAAA,MAAI,CAAClB,YAAL;AAEH,SAPD,MAOO;AACHmB,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;AACJ,OAbD;AAeA,UAAI3B,UAAU,CAAC4B,GAAX,IAAkB5B,UAAU,CAAC4B,GAAX,CAAeC,gBAArC,EACI9B,CAAC,CAAC+B,QAAD,CAAD,CAAYT,EAAZ,CAAerB,UAAU,CAAC4B,GAAX,CAAeC,gBAA9B,EAAgD,KAAKtB,YAArD;AACP;;;WAQD,gCAAuB;AACnBR,MAAAA,CAAC,CAAC,KAAKa,OAAN,CAAD,CAAgBmB,GAAhB,CAAoB9B,eAApB;AACAF,MAAAA,CAAC,CAAC+B,QAAD,CAAD,CAAYC,GAAZ,CAAgB/B,UAAU,CAAC4B,GAAX,CAAeC,gBAA/B;AACH;;;WAMD,kBAAS;AACL,UAAWG,GAAX,GAAkB,KAAKC,KAAvB,CAAOC,GAAP;AACA,0BACI,QAAC,GAAD;AAAK,QAAA,GAAG,EAAE,KAAKxB;AAAf,SAA2B,KAAKuB,KAAhC;AAAA,+BACI;AAAI,UAAA,SAAS,EAAE,KAAK5B,KAAL,CAAWC;AAA1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;;;;EAnEyCT,S;;AAAzBO,gB,CAEV+B,S,GAAY;AACf;AACAD,EAAAA,GAAG,EAAEpC,SAAS,CAACsC;AAFA,C;AAFFhC,gB,CAOViC,Y,GAAe;AAClBH,EAAAA,GAAG,EAAE;AADa,C;SAPL9B,gB","sourcesContent":["// FULLSCREEN\r\n// -----------------------------------\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport $ from './wrapper.js';\r\nimport screenfull from 'screenfull';\r\n\r\nconst FSTOGGLER_EVENT = 'click.fstoggler';\r\nconst FULLSCREEN_ON_ICON = 'fa fa-expand';\r\nconst FULLSCREEN_OFF_ICON = 'fa fa-compress'\r\n\r\n/**\r\n * Wrapper for screenfull plugin\r\n * Wraps child element and toggles\r\n * fullscreen mode on click\r\n */\r\nexport default class ToggleFullscreen extends Component {\r\n\r\n    static propTypes = {\r\n        /** tag to use, defaults to A */\r\n        tag: PropTypes.string\r\n    }\r\n\r\n    static defaultProps = {\r\n        tag: 'a'\r\n    }\r\n\r\n    state = {\r\n        iconClass: FULLSCREEN_ON_ICON\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const $fsToggler = $(this.element);\r\n\r\n        // Not supported under IE\r\n        const ua = window.navigator.userAgent;\r\n        if (ua.indexOf(\"MSIE \") > 0 || !!ua.match(/Trident.*rv:11\\./)) {\r\n            $fsToggler.addClass('d-none');\r\n            return; // and abort\r\n        }\r\n\r\n        $fsToggler.on(FSTOGGLER_EVENT, e => {\r\n            e.preventDefault();\r\n\r\n            if (screenfull.enabled) {\r\n\r\n                screenfull.toggle();\r\n\r\n                // Switch icon indicator\r\n                this.toggleFSIcon();\r\n\r\n            } else {\r\n                console.log('Fullscreen not enabled');\r\n            }\r\n        });\r\n\r\n        if (screenfull.raw && screenfull.raw.fullscreenchange)\r\n            $(document).on(screenfull.raw.fullscreenchange, this.toggleFSIcon);\r\n    }\r\n\r\n    toggleFSIcon = () => {\r\n        this.setState({\r\n            iconClass: screenfull.isFullscreen ? FULLSCREEN_OFF_ICON : FULLSCREEN_ON_ICON\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        $(this.element).off(FSTOGGLER_EVENT);\r\n        $(document).off(screenfull.raw.fullscreenchange)\r\n    }\r\n\r\n    setRef = node => {\r\n        this.element = node;\r\n    }\r\n\r\n    render() {\r\n        const {tag:Tag} = this.props;\r\n        return (\r\n            <Tag ref={this.setRef} {...this.props}>\r\n                <em className={this.state.iconClass}></em>\r\n            </Tag>\r\n        )\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}