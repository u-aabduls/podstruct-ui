{"ast":null,"code":"import { TOGGLE_SETTING, CHANGE_SETTING } from '../actions/actions'; // Helpers to change class attribute\n\nvar updateElementClass = function updateElementClass(el, stat, name) {\n  return el && el.classList[stat ? 'add' : 'remove'](name);\n};\n\nvar updateBodyClass = function updateBodyClass(stat, name) {\n  return updateElementClass(document.body, stat, name);\n};\n/**\r\n    When a setting value is changed, detect its value and add/remove\r\n    a classname related with that setting from the target element.\r\n    Export this method to talk directly with the middleware\r\n*/\n\n\nexport var updateClasses = function updateClasses(state) {\n  updateBodyClass(state.settings.isFixed, 'layout-fixed');\n  updateBodyClass(state.settings.isBoxed, 'layout-boxed');\n  updateBodyClass(state.settings.isCollapsed, 'aside-collapsed');\n  updateBodyClass(state.settings.isCollapsedText, 'aside-collapsed-text');\n  updateBodyClass(state.settings.isFloat, 'aside-float');\n  updateBodyClass(state.settings.asideHover, 'aside-hover');\n  updateBodyClass(state.settings.offsidebarOpen, 'offsidebar-open');\n  updateBodyClass(state.settings.asideToggled, 'aside-toggled'); // layout horizontal\n\n  updateBodyClass(state.settings.horizontal, 'layout-h'); // apply change to the sidebar element\n\n  updateElementClass(document.querySelector('.sidebar'), state.settings.asideScrollbar, 'show-scrollbar');\n};\n/*\r\n    Hook into setting changes in order to change layout.\r\n*/\n\nvar settings = function settings(store) {\n  return function (next) {\n    return function (action) {\n      var result = next(action);\n\n      if (action.type === TOGGLE_SETTING || action.type === CHANGE_SETTING) {\n        updateClasses(store.getState());\n      }\n\n      return result;\n    };\n  };\n};\n\nexport default settings;","map":{"version":3,"sources":["/Users/a18322/Desktop/podstruct-ui/src/store/middlewares/settings.middleware.js"],"names":["TOGGLE_SETTING","CHANGE_SETTING","updateElementClass","el","stat","name","classList","updateBodyClass","document","body","updateClasses","state","settings","isFixed","isBoxed","isCollapsed","isCollapsedText","isFloat","asideHover","offsidebarOpen","asideToggled","horizontal","querySelector","asideScrollbar","store","next","action","result","type","getState"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,cAAzB,QAA+C,oBAA/C,C,CAEA;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX;AAAA,SAAoBF,EAAE,IAAIA,EAAE,CAACG,SAAH,CAAaF,IAAI,GAAG,KAAH,GAAW,QAA5B,EAAsCC,IAAtC,CAA1B;AAAA,CAA3B;;AACA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACH,IAAD,EAAOC,IAAP;AAAA,SAAgBH,kBAAkB,CAACM,QAAQ,CAACC,IAAV,EAAgBL,IAAhB,EAAsBC,IAAtB,CAAlC;AAAA,CAAxB;AAEA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAClCJ,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeC,OAAhB,EAAyB,cAAzB,CAAf;AACAN,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeE,OAAhB,EAAyB,cAAzB,CAAf;AACAP,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeG,WAAhB,EAA6B,iBAA7B,CAAf;AACAR,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeI,eAAhB,EAAiC,sBAAjC,CAAf;AACAT,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeK,OAAhB,EAAyB,aAAzB,CAAf;AACAV,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeM,UAAhB,EAA4B,aAA5B,CAAf;AACAX,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeO,cAAhB,EAAgC,iBAAhC,CAAf;AACAZ,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeQ,YAAhB,EAA8B,eAA9B,CAAf,CARkC,CASlC;;AACAb,EAAAA,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeS,UAAhB,EAA4B,UAA5B,CAAf,CAVkC,CAWlC;;AACAnB,EAAAA,kBAAkB,CAACM,QAAQ,CAACc,aAAT,CAAuB,UAAvB,CAAD,EAAqCX,KAAK,CAACC,QAAN,CAAeW,cAApD,EAAoE,gBAApE,CAAlB;AACH,CAbM;AAeP;AACA;AACA;;AACA,IAAMX,QAAQ,GAAG,SAAXA,QAAW,CAAAY,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACxC,UAAIC,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAjB;;AACA,UAAIA,MAAM,CAACE,IAAP,KAAgB5B,cAAhB,IAAkC0B,MAAM,CAACE,IAAP,KAAgB3B,cAAtD,EAAsE;AAClES,QAAAA,aAAa,CAACc,KAAK,CAACK,QAAN,EAAD,CAAb;AACH;;AACD,aAAOF,MAAP;AACH,KAN6B;AAAA,GAAR;AAAA,CAAtB;;AAQA,eAAef,QAAf","sourcesContent":["import { TOGGLE_SETTING, CHANGE_SETTING } from '../actions/actions';\r\n\r\n// Helpers to change class attribute\r\nconst updateElementClass = (el, stat, name) => el && el.classList[stat ? 'add' : 'remove'](name)\r\nconst updateBodyClass = (stat, name) => updateElementClass(document.body, stat, name)\r\n\r\n/**\r\n    When a setting value is changed, detect its value and add/remove\r\n    a classname related with that setting from the target element.\r\n    Export this method to talk directly with the middleware\r\n*/\r\nexport const updateClasses = state => {\r\n    updateBodyClass(state.settings.isFixed, 'layout-fixed')\r\n    updateBodyClass(state.settings.isBoxed, 'layout-boxed')\r\n    updateBodyClass(state.settings.isCollapsed, 'aside-collapsed')\r\n    updateBodyClass(state.settings.isCollapsedText, 'aside-collapsed-text')\r\n    updateBodyClass(state.settings.isFloat, 'aside-float')\r\n    updateBodyClass(state.settings.asideHover, 'aside-hover')\r\n    updateBodyClass(state.settings.offsidebarOpen, 'offsidebar-open')\r\n    updateBodyClass(state.settings.asideToggled, 'aside-toggled')\r\n    // layout horizontal\r\n    updateBodyClass(state.settings.horizontal, 'layout-h')\r\n    // apply change to the sidebar element\r\n    updateElementClass(document.querySelector('.sidebar'), state.settings.asideScrollbar, 'show-scrollbar')\r\n}\r\n\r\n/*\r\n    Hook into setting changes in order to change layout.\r\n*/\r\nconst settings = store => next => action => {\r\n    let result = next(action)\r\n    if (action.type === TOGGLE_SETTING || action.type === CHANGE_SETTING) {\r\n        updateClasses(store.getState())\r\n    }\r\n    return result\r\n}\r\n\r\nexport default settings;"]},"metadata":{},"sourceType":"module"}