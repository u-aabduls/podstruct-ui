{"ast":null,"code":"import _toConsumableArray from \"/Users/a18322/Desktop/podstruct-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers/reducers';\nimport middlewares from './middlewares/middlewares';\nimport { updateTheme } from './middlewares/themes.middleware.js';\nimport { persistedState, saveState } from './persisted.store.js';\nexport default function configureStore() {\n  var store = createStore(reducers, persistedState, // second argument overrides the initial state\n  applyMiddleware.apply(void 0, _toConsumableArray(middlewares))); // add a listener that will be invoked on any state change\n\n  store.subscribe(function () {\n    saveState(store.getState());\n  }); // Update the initial theme\n\n  updateTheme(store.getState());\n  return store;\n}","map":{"version":3,"sources":["/Users/a18322/Desktop/podstruct-fe/src/store/store.js"],"names":["createStore","applyMiddleware","reducers","middlewares","updateTheme","persistedState","saveState","configureStore","store","subscribe","getState"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,SAASC,WAAT,QAA4B,oCAA5B;AAEA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,sBAA1C;AAEA,eAAe,SAASC,cAAT,GAA0B;AAErC,MAAMC,KAAK,GAAGR,WAAW,CACrBE,QADqB,EAErBG,cAFqB,EAEL;AAChBJ,EAAAA,eAAe,MAAf,4BACOE,WADP,EAHqB,CAAzB,CAFqC,CAUrC;;AACAK,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AAClBH,IAAAA,SAAS,CAACE,KAAK,CAACE,QAAN,EAAD,CAAT;AACH,GAFD,EAXqC,CAerC;;AACAN,EAAAA,WAAW,CAACI,KAAK,CAACE,QAAN,EAAD,CAAX;AAEA,SAAOF,KAAP;AAEH","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducers/reducers';\r\nimport middlewares from './middlewares/middlewares'\r\n\r\nimport { updateTheme } from './middlewares/themes.middleware.js';\r\n\r\nimport { persistedState, saveState } from './persisted.store.js';\r\n\r\nexport default function configureStore() {\r\n\r\n    const store = createStore(\r\n        reducers,\r\n        persistedState, // second argument overrides the initial state\r\n        applyMiddleware(\r\n            ...middlewares\r\n        )\r\n    );\r\n\r\n    // add a listener that will be invoked on any state change\r\n    store.subscribe(() => {\r\n        saveState(store.getState());\r\n    });\r\n\r\n    // Update the initial theme\r\n    updateTheme(store.getState())\r\n\r\n    return store;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}