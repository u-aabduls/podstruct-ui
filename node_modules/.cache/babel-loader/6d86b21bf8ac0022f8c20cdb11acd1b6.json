{"ast":null,"code":"import { updateClasses } from './middlewares/settings.middleware.js';\nimport { updateTheme } from './middlewares/themes.middleware.js';\nvar STORAGE_KEY = 'angle-store-key';\n/**\r\n * Use this function if you need to call a middleware\r\n * when setting the initial state.\r\n */\n\nvar callMiddlewares = function callMiddlewares(state) {\n  // Since a middlwrare is requried to modify the DOM in this case\n  // for settings and themes, is necessary to call middleware\n  // directly to set the initial state loaded from storage\n  updateClasses(state);\n  updateTheme(state);\n};\n/* Use an IIFE to export the persisted state in a variable */\n\n\nexport var persistedState = function () {\n  try {\n    var rawState = localStorage.getItem(STORAGE_KEY);\n    if (rawState === null) return undefined;\n    var state = JSON.parse(rawState);\n    callMiddlewares(state);\n    return state;\n  } catch (err) {\n    return undefined;\n  }\n}();\n/* Export a method to save state on each store update */\n\nexport var saveState = function saveState(state) {\n  try {\n    var stateFilter = JSON.parse(JSON.stringify(state)); // deep clone\n\n    ['offsidebarOpen', 'asideToggled', 'horizontal'] // states which we don't want to persist.\n    .forEach(function (item) {\n      return delete stateFilter.settings[item];\n    });\n    var rawState = JSON.stringify(stateFilter);\n    localStorage.setItem(STORAGE_KEY, rawState);\n  } catch (err) {// Ignore write errors.\n  }\n};","map":{"version":3,"sources":["/Users/a18322/Desktop/podstruct-ui/src/store/persisted.store.js"],"names":["updateClasses","updateTheme","STORAGE_KEY","callMiddlewares","state","persistedState","rawState","localStorage","getItem","undefined","JSON","parse","err","saveState","stateFilter","stringify","forEach","item","settings","setItem"],"mappings":"AAAA,SAASA,aAAT,QAA8B,sCAA9B;AACA,SAASC,WAAT,QAA4B,oCAA5B;AAEA,IAAMC,WAAW,GAAG,iBAApB;AAGA;AACA;AACA;AACA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC7B;AACA;AACA;AACAJ,EAAAA,aAAa,CAACI,KAAD,CAAb;AACAH,EAAAA,WAAW,CAACG,KAAD,CAAX;AACH,CAND;AAQA;;;AACA,OAAO,IAAMC,cAAc,GAAI,YAAM;AACjC,MAAI;AACA,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqBN,WAArB,CAAjB;AACA,QAAII,QAAQ,KAAK,IAAjB,EAAuB,OAAOG,SAAP;AACvB,QAAML,KAAK,GAAGM,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAd;AACAH,IAAAA,eAAe,CAACC,KAAD,CAAf;AACA,WAAOA,KAAP;AACH,GAND,CAME,OAAOQ,GAAP,EAAY;AACV,WAAOH,SAAP;AACH;AACJ,CAV6B,EAAvB;AAYP;;AACA,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACT,KAAD,EAAW;AAChC,MAAI;AACA,QAAIU,WAAW,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACK,SAAL,CAAeX,KAAf,CAAX,CAAlB,CADA,CACqD;;AACrD,KAAC,gBAAD,EAAmB,cAAnB,EAAmC,YAAnC,EAAiD;AAAjD,KACCY,OADD,CACS,UAAAC,IAAI;AAAA,aAAI,OAAOH,WAAW,CAACI,QAAZ,CAAqBD,IAArB,CAAX;AAAA,KADb;AAEA,QAAMX,QAAQ,GAAGI,IAAI,CAACK,SAAL,CAAeD,WAAf,CAAjB;AACAP,IAAAA,YAAY,CAACY,OAAb,CAAqBjB,WAArB,EAAkCI,QAAlC;AACH,GAND,CAME,OAAOM,GAAP,EAAY,CACV;AACH;AACJ,CAVM","sourcesContent":["import { updateClasses } from './middlewares/settings.middleware.js';\r\nimport { updateTheme } from './middlewares/themes.middleware.js';\r\n\r\nconst STORAGE_KEY = 'angle-store-key';\r\n\r\n\r\n/**\r\n * Use this function if you need to call a middleware\r\n * when setting the initial state.\r\n */\r\nconst callMiddlewares = state => {\r\n    // Since a middlwrare is requried to modify the DOM in this case\r\n    // for settings and themes, is necessary to call middleware\r\n    // directly to set the initial state loaded from storage\r\n    updateClasses(state);\r\n    updateTheme(state)\r\n}\r\n\r\n/* Use an IIFE to export the persisted state in a variable */\r\nexport const persistedState = (() => {\r\n    try {\r\n        const rawState = localStorage.getItem(STORAGE_KEY);\r\n        if (rawState === null) return undefined;\r\n        const state = JSON.parse(rawState);\r\n        callMiddlewares(state);\r\n        return state;\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n})();\r\n\r\n/* Export a method to save state on each store update */\r\nexport const saveState = (state) => {\r\n    try {\r\n        let stateFilter = JSON.parse(JSON.stringify(state)); // deep clone\r\n        ['offsidebarOpen', 'asideToggled', 'horizontal'] // states which we don't want to persist.\r\n        .forEach(item => delete stateFilter.settings[item])\r\n        const rawState = JSON.stringify(stateFilter);\r\n        localStorage.setItem(STORAGE_KEY, rawState);\r\n    } catch (err) {\r\n        // Ignore write errors.\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}