{"ast":null,"code":"import _defineProperty from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/a18322/Desktop/podstruct-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// https://github.com/chriso/validator.js\nimport validator from 'validator';\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\n\nvar FormValidator = {\n  /**\r\n   * Returns true iff:\r\n   *     1) input is alpha only\r\n   *     2) input's only special character (if exists) is apostrophe (') or hyphen (-)\r\n   */\n  isValidName: function isValidName(input) {\n    var alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n    var i = input.length;\n    input = input.toUpperCase();\n\n    while (i--) {\n      var char = input.charAt(i);\n\n      if (!alpha.includes(char) && char != '\\'' && char != '-') {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Returns true iff:\r\n   *     1) input is alphanumeric\r\n   *     2) input's only special character (if exists) is hyphen (-) \r\n   */\n  isValidPODName: function isValidPODName(input) {\n    var alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n    var num = \"0123456789\".split(\"\"); // name not valid if less than 2 characters long\n\n    if (input.length < 2) {\n      return false;\n    }\n\n    var i = input.length;\n    input = input.toUpperCase();\n\n    while (i--) {\n      var char = input.charAt(i);\n\n      if (!alpha.includes(char) && !num.includes(char)) {\n        if (char != '-') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Returns true iff:\r\n   *     1) input is at least 8 chars long\r\n   *     2) input contains 1 upper case letter \r\n   *     3) input contains 1 lower case letter\r\n   *     4) input contains 1 number \r\n   *     5) input contains 1 special character\r\n   */\n  isValidPassword: function isValidPassword(input) {\n    var alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n    var alphaLower = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n    var num = \"0123456789\".split(\"\");\n    var special = \"`~!@#$%^&*()-_=+[{]};:,<.>/?\".split(\"\");\n\n    if (input.length < 8) {\n      return false;\n    }\n\n    var i = input.length,\n        upperFound = false,\n        lowerFound = false,\n        numFound = false,\n        specialFound = false;\n\n    while (i--) {\n      var char = input.charAt(i);\n\n      if (!upperFound && alpha.includes(char)) {\n        upperFound = true;\n      }\n\n      if (!lowerFound && alphaLower.includes(char)) {\n        lowerFound = true;\n      }\n\n      if (!numFound && num.includes(char)) {\n        numFound = true;\n      }\n\n      if (!specialFound && special.includes(char)) {\n        specialFound = true;\n      }\n    }\n\n    return upperFound && lowerFound && numFound && specialFound;\n  },\n\n  /**\r\n   * Validate input element\r\n   * @param element Dome element of the input\r\n   * Uses the following attributes\r\n   *     data-validate: array in json format with validation methods\r\n   *     data-param: used to provide arguments for certain methods.\r\n   */\n  validate: function validate(element) {\n    var _this = this;\n\n    var isCheckbox = element.type === 'checkbox';\n    var value = isCheckbox ? element.checked : element.value;\n    var name = element.name;\n    if (!name) throw new Error('Input name must not be empty.'); // use getAttribute to support IE10+\n\n    var param = element.getAttribute('data-param');\n    var validations = JSON.parse(element.getAttribute('data-validate'));\n    var result = [];\n\n    if (validations && validations.length) {\n      /*  Result of each validation must be true if the input is invalid\r\n          and false if valid. */\n      validations.forEach(function (m) {\n        switch (m) {\n          case 'required':\n            result[m] = isCheckbox ? value === false : validator.isEmpty(value);\n            break;\n\n          case 'email':\n            result[m] = !validator.isEmail(value);\n            break;\n\n          case 'number':\n            result[m] = !validator.isNumeric(value);\n            break;\n\n          case 'integer':\n            result[m] = !validator.isInt(value);\n            break;\n\n          case 'alphanum':\n            result[m] = !validator.isAlphanumeric(value);\n            break;\n\n          case 'url':\n            result[m] = !validator.isURL(value);\n            break;\n\n          case 'equalto':\n            // here we expect a valid ID as param\n            var value2 = document.getElementById(param).value;\n            result[m] = !validator.equals(value, value2);\n            break;\n\n          case 'minlen':\n            result[m] = !validator.isLength(value, {\n              min: param\n            });\n            break;\n\n          case 'maxlen':\n            result[m] = !validator.isLength(value, {\n              max: param\n            });\n            break;\n\n          case 'len':\n            var _JSON$parse = JSON.parse(param),\n                _JSON$parse2 = _slicedToArray(_JSON$parse, 2),\n                min = _JSON$parse2[0],\n                max = _JSON$parse2[1];\n\n            result[m] = !validator.isLength(value, {\n              min: min,\n              max: max\n            });\n            break;\n\n          case 'min':\n            result[m] = !validator.isInt(value, {\n              min: validator.toInt(param)\n            });\n            break;\n\n          case 'max':\n            result[m] = !validator.isInt(value, {\n              max: validator.toInt(param)\n            });\n            break;\n\n          case 'list':\n            var list = JSON.parse(param);\n            result[m] = !validator.isIn(value, list);\n            break;\n\n          case 'name':\n            result[m] = !_this.isValidName(value);\n            break;\n\n          case 'podname':\n            result[m] = !_this.isValidPODName(value);\n            break;\n\n          case 'password':\n            result[m] = !_this.isValidPassword(value);\n            break;\n\n          default:\n            throw new Error('Unrecognized validator.');\n        }\n      });\n    }\n\n    return result;\n  },\n\n  /**\r\n   * Bulk validation of input elements.\r\n   * Used with form elements collection.\r\n   * @param  {Array} inputs Array for DOM element\r\n   * @return {Object}       Contains array of error and a flag to\r\n   *                        indicate if there was a validation error\r\n   */\n  bulkValidate: function bulkValidate(inputs) {\n    var _this2 = this;\n\n    var errors = {},\n        hasError = false;\n    inputs.forEach(function (input) {\n      var result = _this2.validate(input);\n\n      errors = _objectSpread(_objectSpread({}, errors), {}, _defineProperty({}, input.name, result));\n      if (!hasError) hasError = Object.keys(result).some(function (val) {\n        return result[val];\n      });\n    });\n    return {\n      errors: errors,\n      hasError: hasError\n    };\n  }\n};\nexport default FormValidator;","map":{"version":3,"sources":["/Users/a18322/Desktop/podstruct-ui/src/components/Forms/FormValidator.js"],"names":["validator","FormValidator","isValidName","input","alpha","split","i","length","toUpperCase","char","charAt","includes","isValidPODName","num","isValidPassword","alphaLower","special","upperFound","lowerFound","numFound","specialFound","validate","element","isCheckbox","type","value","checked","name","Error","param","getAttribute","validations","JSON","parse","result","forEach","m","isEmpty","isEmail","isNumeric","isInt","isAlphanumeric","isURL","value2","document","getElementById","equals","isLength","min","max","toInt","list","isIn","bulkValidate","inputs","errors","hasError","Object","keys","some","val"],"mappings":"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","sourcesContent":["// https://github.com/chriso/validator.js\r\nimport validator from 'validator';\r\n\r\n/**\r\n * Helper methods to validate form inputs\r\n * using controlled components\r\n */\r\nconst FormValidator = {\r\n\r\n    /**\r\n     * Returns true iff:\r\n     *     1) input is alpha only\r\n     *     2) input's only special character (if exists) is apostrophe (') or hyphen (-)\r\n     */\r\n    isValidName(input) {\r\n        const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n\r\n        var i = input.length;\r\n        input = input.toUpperCase();\r\n        while (i--) {\r\n            var char = input.charAt(i);\r\n            if (!alpha.includes(char) && (char != '\\'' && char != '-')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Returns true iff:\r\n     *     1) input is alphanumeric\r\n     *     2) input's only special character (if exists) is hyphen (-) \r\n     */\r\n    isValidPODName(input) {\r\n        const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n        const num = \"0123456789\".split(\"\");\r\n\r\n        // name not valid if less than 2 characters long\r\n        if (input.length < 2) {\r\n            return false;\r\n        }\r\n\r\n        var i = input.length;\r\n        input = input.toUpperCase();\r\n        while (i--) {\r\n            var char = input.charAt(i);\r\n            if (!alpha.includes(char) && !num.includes(char)) {\r\n                if (char != '-') {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Returns true iff:\r\n     *     1) input is at least 8 chars long\r\n     *     2) input contains 1 upper case letter \r\n     *     3) input contains 1 lower case letter\r\n     *     4) input contains 1 number \r\n     *     5) input contains 1 special character\r\n     */\r\n    isValidPassword(input) {\r\n        const alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n        const alphaLower = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\r\n        const num = \"0123456789\".split(\"\");\r\n        const special = \"`~!@#$%^&*()-_=+[{]};:,<.>/?\".split(\"\");\r\n\r\n        if (input.length < 8) {\r\n            return false;\r\n        }\r\n\r\n        var i = input.length,\r\n            upperFound = false,\r\n            lowerFound = false,\r\n            numFound = false,\r\n            specialFound = false;\r\n\r\n        while (i--) {\r\n            var char = input.charAt(i);\r\n            if (!upperFound && alpha.includes(char)) {\r\n                upperFound = true;\r\n            }\r\n            if (!lowerFound && alphaLower.includes(char)) {\r\n                lowerFound = true;\r\n            }\r\n            if (!numFound && num.includes(char)) {\r\n                numFound = true;\r\n            }\r\n            if (!specialFound && special.includes(char)) {\r\n                specialFound = true;\r\n            }\r\n        }\r\n        return upperFound && lowerFound && numFound && specialFound;\r\n    },\r\n\r\n    /**\r\n     * Validate input element\r\n     * @param element Dome element of the input\r\n     * Uses the following attributes\r\n     *     data-validate: array in json format with validation methods\r\n     *     data-param: used to provide arguments for certain methods.\r\n     */\r\n    validate(element) {\r\n\r\n        const isCheckbox = element.type === 'checkbox';\r\n        const value = isCheckbox ? element.checked : element.value;\r\n        const name = element.name;\r\n\r\n        if (!name) throw new Error('Input name must not be empty.');\r\n\r\n        // use getAttribute to support IE10+\r\n        const param = element.getAttribute('data-param');\r\n        const validations = JSON.parse(element.getAttribute('data-validate'));\r\n\r\n        let result = []\r\n        if(validations && validations.length) {\r\n            /*  Result of each validation must be true if the input is invalid\r\n                and false if valid. */\r\n            validations.forEach(m => {\r\n                switch (m) {\r\n                    case 'required':\r\n                        result[m] = isCheckbox ? value === false : validator.isEmpty(value)\r\n                        break;\r\n                    case 'email':\r\n                        result[m] = !validator.isEmail(value)\r\n                        break;\r\n                    case 'number':\r\n                        result[m] = !validator.isNumeric(value)\r\n                        break;\r\n                    case 'integer':\r\n                        result[m] = !validator.isInt(value)\r\n                        break;\r\n                    case 'alphanum':\r\n                        result[m] = !validator.isAlphanumeric(value)\r\n                        break;\r\n                    case 'url':\r\n                        result[m] = !validator.isURL(value)\r\n                        break;\r\n                    case 'equalto':\r\n                        // here we expect a valid ID as param\r\n                        const value2 = document.getElementById(param).value;\r\n                        result[m] = !validator.equals(value, value2)\r\n                        break;\r\n                    case 'minlen':\r\n                        result[m] = !validator.isLength(value, { min: param })\r\n                        break;\r\n                    case 'maxlen':\r\n                        result[m] = !validator.isLength(value, { max: param })\r\n                        break;\r\n                    case 'len':\r\n                        const [min, max] = JSON.parse(param)\r\n                        result[m] = !validator.isLength(value, { min, max })\r\n                        break;\r\n                    case 'min':\r\n                        result[m] = !validator.isInt(value, { min: validator.toInt(param) })\r\n                        break;\r\n                    case 'max':\r\n                        result[m] = !validator.isInt(value, { max: validator.toInt(param) })\r\n                        break;\r\n                    case 'list':\r\n                        const list = JSON.parse(param)\r\n                        result[m] = !validator.isIn(value, list)\r\n                        break;\r\n                    case 'name':\r\n                        result[m] = !this.isValidName(value)\r\n                        break;\r\n                    case 'podname':\r\n                        result[m] = !this.isValidPODName(value)\r\n                        break;\r\n                    case 'password':\r\n                        result[m] = !this.isValidPassword(value)\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unrecognized validator.');\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Bulk validation of input elements.\r\n     * Used with form elements collection.\r\n     * @param  {Array} inputs Array for DOM element\r\n     * @return {Object}       Contains array of error and a flag to\r\n     *                        indicate if there was a validation error\r\n     */\r\n    bulkValidate(inputs) {\r\n        let errors = {},\r\n            hasError = false;\r\n\r\n        inputs.forEach(input => {\r\n            let result = this.validate(input)\r\n            errors = { ...errors, [input.name]: result }\r\n            if (!hasError) hasError = Object.keys(result).some(val => result[val])\r\n        })\r\n\r\n        return {\r\n            errors,\r\n            hasError\r\n        }\r\n    }\r\n}\r\n\r\nexport default FormValidator;"]},"metadata":{},"sourceType":"module"}